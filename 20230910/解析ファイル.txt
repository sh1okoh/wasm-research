=== カスタムセクション
00
61
73
6D
01
00
00
00

=== 型セクション
01: 型セクションを表すバイトコード
25: 後続のバイト列のサイズ 0b00100101 -> 0100101 -> 2^0 + 2^2 + 2^5 = 37バイト
07: 関数の型が7個 00000111 -> 2^0 + 2^1 + 2^2 = 7 (7個ある)

-- 0番目
60: 関数タイプ 
00: 引数の個数(0)
01: 返り値の数 1
7F: 返り値の型i32

-- 1番目
60: 関数タイプ 
01: 引数の個数(1)
7F: 型i32
00: 返り値の数 0

-- 2番目
60: 関数タイプ 
01: 引数の個数(1)
7F: 型i32
01: 返り値の数 1
7F: 型i32

-- 3番目
60: 関数タイプ 
00: 引数の個数(0)
00: 返り値の数 0

-- 4番目
60: 関数タイプ 
02: 引数の個数(2)
7F: 型i32
7F: 型i32
01: 返り値の数 1
7F: 型i32

60: 関数タイプ 
03: 引数の個数(3)
7F: 型i32
7F: 型i32
7F: 型i32
01: 返り値の数 1
7F: 型i32

60: 関数タイプ 
03: 引数の個数(3)
7F: 型i32
7E: 型i64
7F: 型i32
01: 返り値の数 1
7E: 型i32

=== 関数セクション
03: 関数セクションを表す
17: 0x00010111 -> 0010111 -> 2^0 + 2^1 + 2^2 + 2^4 = 23バイト 
16: 関数が22個あることを示す 0010110 -> 2^1 + 2^2 + 2^4 = 22 (これはindex.watの値と一致)
03: 関数0 type index 3
02: 関数1 type index 2
00: 関数2 type index 0
04: 関数3 type index 4
00: 関数4 type index 0
01: 関数5 type index 1
00: 関数6 type index 0
03: 関数7 type index 3
00: 関数8 type index 0
00: 関数9 type index 0
00: 関数10 type index 0
01: 関数11 type index 1
01: 関数12 type index 1
00: 関数13 type index 0
03: 関数14 type index 3
02: 関数15 type index 2
01: 関数16 type index 1
02: 関数17 type index 2
00: 関数18 type index 0
01: 関数19 type index 1
02: 関数20 type index 2
00: 関数21 type index 0

== テーブルセクション
04: テーブルセクション
05: 0b00000101 -> 0000101 -> 5
01: テーブルの数が1個
70: funcref 関数への参照
01: フラグ(1は最大サイズが存在することを示す)
01: 最小サイズ1
01: 最大サイズ1

=== メモリーセクション
05: メモリセクションを表すコード
06: 6バイト続く
01: メモリの数が1つ
01: 1は最大サイズが存在することを示す
80: 0b1000 0000 -> 000 0000
02: 0b0000 0010 -> 100000000 -> 2^8 = 256
80: 0b1000 0000 -> 000 0000
02: 0b0000 0010 -> 100000000 -> 2^8 = 256

=== グローバルセクション
06: グローバルセクションを表すバイトコード
17: 0b00010111 -> 0010111 -> 2^0 + 2^1 + 2^2 + 2^4 = 23バイト
04: グローバル（コンポーネント？変数？）4つあることを示す

7F: i32の型
01: mutable(変更可能)
41: i32.const 後続の定数値をスタックにプッシュ 
80: 0b10000000 -> 0000000
80: 0b10000000 -> 0000000
04: 0b00000100 -> 0000100 -> 1 0000 0000 0000 0000 -> 65536
0B: 終了命令

7F: i32の型
01: mutable(変更可能)
41: i32.const 後続の定数値をスタックにプッシュ 
00: 0
0B: 終了命令

7F: i32の型
01: mutable(変更可能)
41: i32.const 後続の定数値をスタックにプッシュ 
00: 0
0B: 終了命令

7F: i32の型
01: mutable(変更可能)
41: i32.const 後続の定数値をスタックにプッシュ 
00: 0
0B: 終了命令

=== エクスポートセクション
07: エクスポートセクションを示すバイトコード
8F: 0b10001111 -> 0001111
02: 0b00000010 -> 0000010 -> 0000010 0001111 -> 2^0 + 2^1 + 2^2 + 2^3 + 2^8 -> 1+2+4+8+256->271
0E: 0b00001110 -> 2^1 + 2^2 + 2^3 = 14エクスポート

エクスポート0
06: 名前の長さ 6バイト
6D:
65
6D
6F
72
79
02: エクスポートの種類 2はメモリ
00: メモリのインデックス

エクスポート1
11: 名前の長さ 0b00010001 -> 0010001 -> 2^0 + 2^4 = 17バイト
5F
5F
77
61
73
6D
5F
63
61
6C
6C
5F
63
74
6F
72
73
00: エクスポートの種類 (0は関数)
00: index 0

エクスポート2
04: 名前の長さ 4バイト
6D
61
69
6E
00: エクスポートの種類 (0は関数)
03: index 3

エクスポート3
19: 名前の長さ 0b00011001 -> 0011001 -> 2^0 + 2^3 + 2^4 = 25バイト
5F:
5F
69
6E
64
69
72
65
63
74
5F
66
756E6374696F6E5F7461626C65
01: エクスポートの種類 (1はテーブルセクション)
00: index 0

エクスポート4
10: 名前の長さ 0001 0000 -> 2^4 = 16
5F5F6572
726E6F5F6C6F63617469
6F6E
00: エクスポートの種類 (0は関数)
04: index 4

エクスポート5
06
66666C757368
00: エクスポートの種類 (0は関数)
11: index 17(0b00010001 -> 2^0 + 2^4 = 17)

エクスポート6
15: 名前の長さ 00010101 -> 2^0 + 2^2 + 2^4 = 21
656D73637269
7074656E5F737461636B
5F696E6974
00: エクスポートの種類 (0は関数)
07: index 7

エクスポート7
19: 名前の長さ 0b00011001 -> 2^0 + 2^3 + 2^4 = 25
656D
736372697074656E5F73
7461636B5F6765745F66
726565
00: エクスポートの種類 (0は関数)
08: index 8

エクスポート8
19: 名前の長さ 0b00011001 -> 2^0 + 2^3 + 2^4 = 25
65: 
6D:
73:
63:
72697074656E5F737461
636B5F6765745F626173
65
00: エクスポートの種類 (0は関数)
09: index 9 

エクスポート9
18: 名前の長さ 0b00011000 -> 2^3 + 2^4 = 24
656D73637269
7074656E5F737461636B
5F6765745F656E64
00: エクスポートの種類 (0は関数)
0A: index 10

エクスポート10
09: 名前の長さ 9バイト
737461636B53617665
00: エクスポートの種類 (0は関数)
12: index 0b00010010 -> 2^1 + 2^4 = 18

エクスポート11
0C:
737461636B5265
73746F7265
00: エクスポートの種類 (0は関数)
13: index 0b00010011 -> 2^0 + 2^1 + 2^4 = 19

エクスポート12
0A
7374
61636B416C6C6F63
00: エクスポートの種類 (0は関数)
14: index 20

エクスポート13
1C: 00011100 -> 2^2 + 2^3 + 2^4 = 28
656D736372697074656E
5F737461636B5F676574
5F63757272656E74

00: エクスポートの種類 (0は関数)
15: index 21

== コードセクション
0A
D4
06160400 10070BB2 0201217F 23002101 41202102 20012002 6B210320 03200036 02182003 28021821 04024002 4020040D 00410021 05200320 0536021C 0C010B20 03280218 21064101 21072006 21082007 21092008 20094621 0A410121 0B200A20 0B71210C 0240200C 450D0041 01210D20 03200D36 021C0C01 0B410021 0E200320 0E360214 4101210F 2003200F 36021041 01211020 03201036 02080240 03402003 28020821 11200328 02182112 20112113 20122114 20132014 4C211541 01211620 15201671 21172017 450D0120 03280214 21182003 28021021 19201820 196A211A 2003201A 36020C20 03280210 211B2003 201B3602 14200328 020C211C 2003201C 36021020 03280208 211D4101 211E201D 201E6A21 1F200320 1F360208 0C000B00 0B200328 02142120 20032020 36021C0B 20032802 1C212120 210F0B57 010A7F23 00210041 10210120 0020016B 21022002 24004100 21032002 20033602 0C410A21 04200220 04360208 20022802 08210520 05100121 06200220 06360204 41002107 41102108 20022008 6A210920 09240020 070F0B0B 01017F10 02210220 020F0B06 00418080 040B0600 20002401 0B040023 010B1200 41808004 24034100 410F6A41 70712402 0B070023 0023026B 0B040023 030B0400 23020B02 000B0200 0B0C0041 84800410 0B418880 040B0800 41848004 100C0B04 0041010B 02000BB4 0201037F 02402000 0D004100 21010240 41002802 8C800445 0D004100 28028C80 04101121 010B0240 41002802 8C800445 0D004100 28028C80 04101120 01722101 0B024010 0D280200 2200450D 00034041 00210202 40200028 024C4100 480D0020 00100F21 020B0240 20002802 14200028 021C460D 00200010 11200172 21010B02 40200245 0D002000 10100B20 00280238 22000D00 0B0B100E 20010F0B 41002102 02402000 28024C41 00480D00 2000100F 21020B02 40024002 40200028 02142000 28021C46 0D002000 41004100 20002802 24110500 1A200028 02140D00 417F2101 20020D01 0C020B02 40200028 02042201 20002802 08220346 0D002000 20012003 6BAC4101 20002802 28110600 1A0B4100 21012000 41003602 1C200042 00370310 20004200 37020420 02450D01 0B200010 100B2001 0B040023 000B0600 20002400 0B120102 7F230020 006B4170 71220124 0020010B 04002300 0B