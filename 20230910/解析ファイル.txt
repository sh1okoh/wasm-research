=== カスタムセクション
00
61
73
6D
01
00
00
00

=== 型セクション
01: 型セクションを表すバイトコード
25: 後続のバイト列のサイズ 0b00100101 -> 0100101 -> 2^0 + 2^2 + 2^5 = 37バイト
07: 関数の型が7個 00000111 -> 2^0 + 2^1 + 2^2 = 7 (7個ある)

-- 0番目
60: 関数タイプ 
00: 引数の個数(0)
01: 返り値の数 1
7F: 返り値の型i32

-- 1番目
60: 関数タイプ 
01: 引数の個数(1)
7F: 型i32
00: 返り値の数 0

-- 2番目
60: 関数タイプ 
01: 引数の個数(1)
7F: 型i32
01: 返り値の数 1
7F: 型i32

-- 3番目
60: 関数タイプ 
00: 引数の個数(0)
00: 返り値の数 0

-- 4番目
60: 関数タイプ 
02: 引数の個数(2)
7F: 型i32
7F: 型i32
01: 返り値の数 1
7F: 型i32

60: 関数タイプ 
03: 引数の個数(3)
7F: 型i32
7F: 型i32
7F: 型i32
01: 返り値の数 1
7F: 型i32

60: 関数タイプ 
03: 引数の個数(3)
7F: 型i32
7E: 型i64
7F: 型i32
01: 返り値の数 1
7E: 型i32

=== 関数セクション
03: 関数セクションを表す
17: 0x00010111 -> 0010111 -> 2^0 + 2^1 + 2^2 + 2^4 = 23バイト 
16: 関数が22個あることを示す 0010110 -> 2^1 + 2^2 + 2^4 = 22 (これはindex.watの値と一致)
03: 関数0 type index 3
02: 関数1 type index 2
00: 関数2 type index 0
04: 関数3 type index 4
00: 関数4 type index 0
01: 関数5 type index 1
00: 関数6 type index 0
03: 関数7 type index 3
00: 関数8 type index 0
00: 関数9 type index 0
00: 関数10 type index 0
01: 関数11 type index 1
01: 関数12 type index 1
00: 関数13 type index 0
03: 関数14 type index 3
02: 関数15 type index 2
01: 関数16 type index 1
02: 関数17 type index 2
00: 関数18 type index 0
01: 関数19 type index 1
02: 関数20 type index 2
00: 関数21 type index 0

== テーブルセクション
04: テーブルセクション
05: 0b00000101 -> 0000101 -> 5
01: テーブルの数が1個
70: funcref 関数への参照
01: フラグ(1は最大サイズが存在することを示す)
01: 最小サイズ1
01: 最大サイズ1

=== メモリーセクション
05: メモリセクションを表すコード
06: 6バイト続く
01: メモリの数が1つ
01: 1は最大サイズが存在することを示す
80: 0b1000 0000 -> 000 0000
02: 0b0000 0010 -> 100000000 -> 2^8 = 256
80: 0b1000 0000 -> 000 0000
02: 0b0000 0010 -> 100000000 -> 2^8 = 256

=== グローバルセクション
06: グローバルセクションを表すバイトコード
17: 0b00010111 -> 0010111 -> 2^0 + 2^1 + 2^2 + 2^4 = 23バイト
04: グローバル（コンポーネント？変数？）4つあることを示す

7F: i32の型
01: mutable(変更可能)
41: i32.const 後続の定数値をスタックにプッシュ 
80: 0b10000000 -> 0000000
80: 0b10000000 -> 0000000
04: 0b00000100 -> 0000100 -> 1 0000 0000 0000 0000 -> 65536
0B: 終了命令

7F: i32の型
01: mutable(変更可能)
41: i32.const 後続の定数値をスタックにプッシュ 
00: 0
0B: 終了命令

7F: i32の型
01: mutable(変更可能)
41: i32.const 後続の定数値をスタックにプッシュ 
00: 0
0B: 終了命令

7F: i32の型
01: mutable(変更可能)
41: i32.const 後続の定数値をスタックにプッシュ 
00: 0
0B: 終了命令

=== エクスポートセクション
07: エクスポートセクションを示すバイトコード
8F: 0b10001111 -> 0001111
02: 0b00000010 -> 0000010 -> 0000010 0001111 -> 2^0 + 2^1 + 2^2 + 2^3 + 2^8 -> 1+2+4+8+256->271
0E: 0b00001110 -> 2^1 + 2^2 + 2^3 = 14エクスポート

エクスポート0
06: 名前の長さ 6バイト
6D:
65
6D
6F
72
79
02: エクスポートの種類 2はメモリ
00: メモリのインデックス

エクスポート1
11: 名前の長さ 0b00010001 -> 0010001 -> 2^0 + 2^4 = 17バイト
5F
5F
77
61
73
6D
5F
63
61
6C
6C
5F
63
74
6F
72
73
00: エクスポートの種類 (0は関数)
00: index 0

エクスポート2
04: 名前の長さ 4バイト
6D
61
69
6E
00: エクスポートの種類 (0は関数)
03: index 3

エクスポート3
19: 名前の長さ 0b00011001 -> 0011001 -> 2^0 + 2^3 + 2^4 = 25バイト
5F:
5F
69
6E
64
69
72
65
63
74
5F
66
756E6374696F6E5F7461626C65
01: エクスポートの種類 (1はテーブルセクション)
00: index 0

エクスポート4
10: 名前の長さ 0001 0000 -> 2^4 = 16
5F5F6572
726E6F5F6C6F63617469
6F6E
00: エクスポートの種類 (0は関数)
04: index 4

エクスポート5
06
66666C757368
00: エクスポートの種類 (0は関数)
11: index 17(0b00010001 -> 2^0 + 2^4 = 17)

エクスポート6
15: 名前の長さ 00010101 -> 2^0 + 2^2 + 2^4 = 21
656D73637269
7074656E5F737461636B
5F696E6974
00: エクスポートの種類 (0は関数)
07: index 7

エクスポート7
19: 名前の長さ 0b00011001 -> 2^0 + 2^3 + 2^4 = 25
656D
736372697074656E5F73
7461636B5F6765745F66
726565
00: エクスポートの種類 (0は関数)
08: index 8

エクスポート8
19: 名前の長さ 0b00011001 -> 2^0 + 2^3 + 2^4 = 25
65: 
6D:
73:
63:
72697074656E5F737461
636B5F6765745F626173
65
00: エクスポートの種類 (0は関数)
09: index 9 

エクスポート9
18: 名前の長さ 0b00011000 -> 2^3 + 2^4 = 24
656D73637269
7074656E5F737461636B
5F6765745F656E64
00: エクスポートの種類 (0は関数)
0A: index 10

エクスポート10
09: 名前の長さ 9バイト
737461636B53617665
00: エクスポートの種類 (0は関数)
12: index 0b00010010 -> 2^1 + 2^4 = 18

エクスポート11
0C:
737461636B5265
73746F7265
00: エクスポートの種類 (0は関数)
13: index 0b00010011 -> 2^0 + 2^1 + 2^4 = 19

エクスポート12
0A
7374
61636B416C6C6F63
00: エクスポートの種類 (0は関数)
14: index 20

エクスポート13
1C: 00011100 -> 2^2 + 2^3 + 2^4 = 28
656D736372697074656E
5F737461636B5F676574
5F63757272656E74

00: エクスポートの種類 (0は関数)
15: index 21

== コードセクション
0A: コードセクションを表すコード
D4: 0b11010100 -> 1010100
06: 0b00000110 -> 0000110 -> 0000110 1010100 -> 2^2 + 2^4 + 2^6 + 2^8 + 2^9 = 852
16: 0b00010110 -> 0010110 -> 2^1 + 2^2 + 2^4 -> 22 22個の関数が含まれる

0番目の関数
04: 0b00000100 -> 0000100 -> 2^2 -> 4バイト
00: 
10: call命令
07: 7番インデックスの関数を呼ぶ
0B: 終了命令

1番目の関数
B2: 0b10110010 -> 0110010
02: 0b00000010 -> 000000100110010 -> 2^1 + 2^4 + 2^5 + 2^8 = 306 
01:
21: ローカル変数の数 33 (0b00100001 -> 2^0 + 2^5 = 33)
7F: i32
23: global.get
00: 0
21: local.set
01: 1
41: i32.const
20: 32(0b00100000 -> 2^5 = 32)
21: local.set
02: 2
20: local.get
01: 1
20: local.get
02: 2
6B: i32.sub
21: local.set
03: 3
20: local.get
03: 3
20: local.get
00: 0
36: i32.store
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
18: offset24(0b00011000 -> 2^3 + 2^4 = 24)
20: local.get
03: 3
28: i32.load
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
18: offset24(0b00011000 -> 2^3 + 2^4 = 24)
21: local.set
04: 4
02: block命令
40: * TODO
02: block命令
40: * TODO
20: local.get
04: 4
0D: br_if TODO
00: 0
41: i32.const
00: 0
21: local.set
05: 5
20: local.get
03: 3
20: local.get
05: 5
36: i32.store
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
1C: offset=28
0C: br TODO
01: 1
0B: 終了命令

20: local.get
03: 3
28: i32.load
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
18: offset=24 (0b00011000 = 2^3+2^4)
21: local.set
06: 6
41: i32.const
01: 1
21: local.set
07: 7
20: local.get
06: 6
21: local.set
08: 8
20: local.get
07: 7
21: local.set
09: 9
20: local.get
08: 8
20: local.get
09: 9
46: i32.eq
21: local.set
0A: 10
41: i32.const
01: 1
21: local.set
0B: 11
20: local.get
0A: 10
20: local.get
0B: 11
71: i32.and
21: local.set
0C: 12
02: block
40: ? TODO
20: local.get
0C: 12
45: i32.eqz TODO
0D: br_if TODO
00: 0
41: i32.const
01: 1
21: local.set
0D: 13
20: local.get
03: 3
20: local.get
0D: 13
36: i32.store
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
1C: offset=28 (0b00011100 -> 2^2 + 2^3 + 2^4 = 28)
0C: br
01: 1
0B: 終了命令
41: i32.const
00: 0
21: local.set
0E: 14
20: local.get
03: 3
20: local.get
0E: 14
36: i32.store
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
14: offset=20
41: i32.const
01: 1
21: local.set
0F: 15 (0b0000 1111 -> 2^0 + 2^1 + 2^2 + 2^3 = 15)
20: local.get
03: 3
20: local.get
0F: 15
36: i32.store
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
10: offset=16
41: i32.const
01: 1
21: local.set
10: 16
20: local.get
03: 3
20: local.get
10: 16
36: i32.store
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: offset=8
02: block
40: ? TODO
03: loop
40: ? TODO
20: local.get
03: 3
28: i32.load
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
21: local.set
11: 17
20: local.get
03: 3
28: i32.load
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
18: 24
21: local.set
12: 18
20: local.get
11: 17
21: local.set
13: 19
20: local.get
12: 18
21: local.set
14: 20
20: local.get
13: 19 (0b00010011 -> 2^0 + 2^1 + 2^4)
20: local.get
14: 20
4C: i32.le_s
21: local.set
15: 21
41: i32.const
01: 1
21: local.set
16: 22
20: local.get
15: 21
20: local.get
16: 22
71: i32.and
21: local.set
17: 23
20: local.get
17: 23
45: i32.eqz
0D: br_if
01: 1
20: local.get
03: 3
28: i32.load
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
14: offset=20
21: local.set
18: 24 (0b00011000 = 2^3 + 2^4)
20: local.get
03: 3
28: i32.load
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
10: offset=16(0001 0000 = 2^4 = 16)
21: local.set
19: 25
20: local.get
18: 24
20: local.get
19: 25
6A: i32.add
21: local.set
1A: 26 (0b0001 1010 -> 2^1 + 2^3 + 2^4 = 26 )
20: local.get
03: 3
20: local.get
1A: 26
36: i32.store
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: offset=12
20: local.get
03: 3
28: i32.load
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
10: 16
21: local.set
1B: 27
20: local.get
03: 3
20: local.get
1B: 27
36: i32.store
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
14: offset=20
20: local.get
03: 3
28: i32.load
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: offset=12
21: local.set
1C: 28
20: local.get
03: 3
20: local.get
1C: 28
36: i32.store
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
10: offset=16
20: local.get
03: 3
28: i32.load
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
21: local.set
1D: 29
41: i32.const 
01: 1
21: local.set
1E: 30
20: local.get
1D: 29
20: local.get
1E: 30
6A: i32.add
21: local.set
1F: 31
20: local.get
03: 3
20: local.get
1F: 31
36: i32.store
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: offset=8
0C: br
00: 0
0B: 終了命令
00: unreachable TODO
0B: 終了命令
20: local.get
03: 3
28: i32.load
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
14: offset=20
21: local.set
20: 32
20: local.get
03: 3
20: local.get
20: 32
36: i32.store
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
1C: offset=28
0B: 終了命令
20: local.get
03: 3
28: i32.load
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
1C: 28
21: local.set
21: 33 (0b0010 0001 = 2^5 + 2^0 = 33)
20: local.get
21: 33 (0b0010 0001 = 2^5 + 2^0 = 33)
0F: return
0B: 終了命令

57: 0b01010111 -> (2^0+2^1+2^2+2^4+2^6) = 87 バイト
01: 
0A:
7F:
23:
00:
21:
00:
41:
10:
21:
01:
20:
00:
20:
01:
6B:
21:
02:
20:
02:
24:
00:
41:
00:
21:
03:
20:
02:
20:
03:
36:
02:
0C:
41:
0A:
21:
04:
20:
02:
20:
04:
36:
02:
08:
20:
02:
28:
02:
08:
21:
05:
20:
05:
10:
01:
21:
06:
20:
02:
20:
06:
36:
02:
04:
41:
00:
21:
07:
41:
10:
21:
08:
20:
02:
20:
08:
6A:
21:
09:
20:
09:
24:
00:
20:
07
0F
0B

0B01017F1002210220020F0B060041808004
0B0600200024010B040023010B12004180800424
034100410F6A41707124020B0700230023026B0B
040023030B040023020B02000B02000B0C004184
8004100B418880040B080041848004100C0B0400
41010B02000BB40201037F024020000D00410021
010240410028028C8004450D00410028028C8004
101121010B0240410028028C8004450D00410028
028C8004101120017221010B0240100D28020022
00450D000340410021020240200028024C410048
0D002000100F21020B0240200028021420002802
1C460D002000101120017221010B02402002450D
00200010100B200028023822000D000B0B100E20
010F0B410021020240200028024C4100480D0020
00100F21020B0240024002402000280214200028
021C460D0020004100410020002802241105001A
20002802140D00417F210120020D010C020B0240
2000280204220120002802082203460D00200020
0120036BAC410120002802281106001A0B410021
012000410036021C200042003703102000420037
02042002450D010B200010100B20010B04002300
0B0600200024000B1201027F230020006B417071
2201240020010B040023000B