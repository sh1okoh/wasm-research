0061736D01000000


00: カスタムセクション
0F
0864796C696E6B2E30010412000000
--------------------------------------------------------------------------

01: Type sectionを表す
13: 後続のセクションの長さを示す。この場合、19バイトの長さを示す
04: Type sectionのエントリ数。4つのエントリがある
** 0番タイプ **
60: 関数タイプを示すマーカーで、0x60は関数タイプ(calculate関数)
02: 最初の関数タイプのエントリは2つのパラメータを持つ (引数に関する情報)
7F: １つ目の引き数は 0x7F = i32
7F: ２つ目の引き数は 0x7F = i32
01: 戻り値の個数は1個
7F: 戻り値は 0x7F = i32
** 1番タイプ **
60: 2番目の関数タイプのエントリ(？？？関数)
00: 引数はなし
00: 戻り値もなし
** 2番タイプ **
60: 3番目の関数タイプのエントリ(？？？関数)
01: 引数は1つ
7F: i32
01: 戻り値は1つ
7F: i32
** 3番タイプ **
60: 4番目の関数タイプのエントリ(？？？関数)
00: 引数はなし
01: 戻り値は1個
7F: 0x7F = i32
--------------------------------------------------------------------------

02: Import section
49: 73バイト
04: 取り込む要素の数＝４
03: 読み込み対象の名前の長さ = 3
65: 'e'
6E: 'n'
76: 'v'
07: 
697072696E746600
0003656E760F5F5F
737461636B5F706F
696E746572037F01
03656E760D5F5F6D
656D6F72795F6261
7365037F0003656E
76066D656D6F7279
020001
--------------------------------------------------------------------------

03: function section
05: ここから5バイト
04: 関数の個数が4つ
01: type section内でのインデックス。1番目
02: type section内でのインデックス。2番目
03: type section内でのインデックス。3番目
00: type section内でのインデックス。0番目
--------------------------------------------------------------------------

07: export section
55: 85バイト
05: エクスポートする要素の数が5つ（JSから見えるようにする、????????グローバル変数と関数4つ）
11: 要素名の長さが17文字
5F: "__wasm_call_ctors"
5F:
77:
61:
73:
6D:
5F:
63:
61:
6C:
6C:
5F:
63:
74:
6F:
72:
73:
00: kindがfunc
01: 要素インデックスが1（←　これが０であってほしいが・・・）

18: 24文字
5F: "__wasm_apply_data_relocs"
5F: 
77:
61:
73:
6D:
5F:
61:
70:
70:
6C:
79:
5F:
64:
61:
74:
61:
5F:
72:
65:
6C:
6F:
63:
73:
00: kindがfunc
01: 要素インデックスが1

09: 9文字
66: "factorial"
61:
63:
74:
6F:
72:
69:
61:
6C:
00: kindがfunc
02: 要素インデックスが2

0F: 15文字
5F: "__original_main"
5F:
6F:
72:
69:
67:
69:
6E:
61:
6C:
5F:
6D:
61:
69:
6E:
00: kindがfunc
03: 要素インデックスが3

04: 4文字
6D: "main"
61: 
69:
6E:
00: kindがfunc
04: 要素インデックスが4
--------------------------------------------------------------------------

0A: code section
53: 83バイト
04: # of codes = 4

03: code size = 3
00: # of local variables = 0
01: nop
0B: End of Code
----------

22: 34バイト：この関数は1個の引数がローカル0番，1個のローカル変数がローカル1番
01: # of local variables = 1
01: ローカル変数のサイズ = 1 byte
7F: ローカル変数のタイプ = i32
41: i32.const：以下の値（0x01）をスタックに入れる．この時点でスタックは{1}
01: 定数の値
21: local.set スタックの先頭データ(1)をローカル01番＝ローカル変数に書き込む
01: ローカル01番＝ローカル変数
20: local.get ($0)：続く番号（$0）の引き数をスタックに入れる．この時点でスタックは{引数の値}
00: $0: ローカル0番（引き数）
04: if: スタックの先頭がtrueならばブロックに入る．
40: ブロック1番
03: loop
40: ブロック0番
20: local.get ($0)：続く番号（$0）の引き数をスタックに入れる．この時点でスタックは{引数の値, 引数の値}
00: $0: ローカル0番（引き数）
20: local.get ($1)：続く番号（$1）のローカル変数の値をスタックに入れる．この時点でスタックは{引数の値, 引数の値, ローカル変数値}
01: $1: ローカル1番（ローカル変数）
6C: i32.mul. ローカル変数×引数，{引数の値, 乗算結果} 
21: local.set ($1): スタックの先頭データ(乗算の結果)をローカル01番＝ローカル変数に書き込む, {引数の値} 
01: $1
20: local.get ($0)：続く番号（$0）の引き数の値をスタックに入れる．この時点でスタックは{引数の値, 引数の値}
00: $0
41: i32.const：以下の値（0x01）をスタックに入れる．この時点でスタックは{引数の値, 引数の値, 1}
01: 定数の値
6B: i32.sub: 引数の値 - 1: （スタックの2番目 - 1番目）, {引数の値，subの結果}
22: local.tee: スタックの先頭をローカル0番＝引数にいれて，スタックはそのまま．{引数の値，subの結果}
00: ローカル0番
0D: br_if: スタックの先頭の値がtrueなら0番ブロックに分岐(loopの先頭)．{引数の値}（br_*は，ifブロックならばブロックを抜ける）
00: 0番ブロック
0B: ブロック0番の終端
0B: ブロック1番の終端
20: local.get ($1)：続く番号（$1）のローカル変数の値をスタックに入れる．この時点でスタックは{引数の値, ローカル変数値}
01: $1
0B: End of Code

25:
01:
01:
7F:
23:
00:
41:
10:
6B:
22:
00:
24:
00:
20:
00:
41:
F8:
00:
36:
02:
00:
23:
01:
20:
00:
10:
00:
1A:
20:
00:
41:
10:
6A:
24:
00:
41:
00:
0B:
04:
00:
10:
03:
0B:
0B:
18:
01:
00:
23:
01:
0B:
12:
54:
68:
65:
20:
72:
65:
73:
75:
6C:
74:
20:
69:
73:
20:
25:
64:
0A:
00:


