
=== カスタムセクション ===
00
61
73
6D
01
00
00
00
=== カスタムセクション === 

=== 型セクション === 
01: 型セクションを表すバイトコード
25: 後続のバイト列のサイズ 0b00100101 -> 0100101 -> 2^0 + 2^2 + 2^5 = 37バイト
07: 関数の型が7個 00000111 -> 2^0 + 2^1 + 2^2 = 7 (7個ある)

# mainのこと（？）
60: 関数タイプ
00: 引数の個数(0)
01: 返り値の数(1)
7F: 返り値の型i32

60: 関数タイプ
01: 引数の個数(1)
7F: 引数の型(i32)
00: 返り値(0)

# add_to_globalのこと（？）
60: 関数タイプ
01: 引数の個数(1)
7F: 引数の型(i32)
01: 返り値の個数(1)
7F: 返り値の型i32

60: 関数タイプ
00: 引数の個数(0)
00: 返り値の個数(0)

60: 関数タイプ
02: 引数の個数(2)
7F: 引数の型(i32)
7F: 引数の型(i32)
01: 返り値の個数(1)
7F: 返り値の型i32

60: 関数タイプ
03: 引数の個数(3)
7F: 引数の型(i32)
7F: 引数の型(i32)
7F: 引数の型(i32)
01: 返り値の個数(1)
7F: 返り値の型i32

60: 関数タイプ
03: 引数の個数(3)
7F: 引数の型(i32)
7E: 引数の型(i64)
7F: 引数の型(i32)
01: 返り値の個数(1)
7E: 返り値の型i64

=== 関数セクション ===
03: 関数セクションを表す
17: 0x00010111 -> 0010111 -> 2^0 + 2^1 + 2^2 + 2^4 = 23バイト 
16: 関数が22個あることを示す 0010110 -> 2^1 + 2^2 + 2^4 = 22 (これはindex.watの値と一致)
03: 関数0は type index 3を参照する
02: 関数1は type index 2を参照する
00: 関数2は type index 0を参照する
04: 関数3は type index 4を参照する
00: 関数4は type index 0を参照する
01: 関数5は type index 1を参照する
00: 関数6は type index 0を参照する
03: 関数7は type index 3を参照する
00: 関数8は type index 0を参照する
00: 関数9は type index 0を参照する
00: 関数10は type index 0を参照する
01: 関数11は type index 1を参照する
01: 関数12は type index 1を参照する
00: 関数13は type index 0を参照する
03: 関数14は type index 3を参照する
02: 関数15は type index 2を参照する
01: 関数16は type index 1を参照する
02: 関数17は type index 2を参照する
00: 関数18は type index 0を参照する
01: 関数19は type index 1を参照する
02: 関数20は type index 2を参照する
00: 関数21は type index 0を参照する

=== テーブルセクション ===
04: テーブルセクションを表すバイトコード
05: 0b00000101 -> 0000101 -> 2^0 + 2^2 = 5 5バイト続く
01: テーブルの数が1個
 (1個目のテーブルの情報が始まる)
70: funcref 関数への参照 (どこのアドレスに存在する関数なのかを表として用意される？)
01: フラグ(1は最大サイズが存在することを示す)？
01: 最小サイズ1
01: 最大サイズ1

=== メモリーセクション ===
05: メモリセクションを表すバイトコード
06: 0b00000110 -> 0000110 -> 2^1 + 2^2 = 6バイト
01: メモリの数が1つ
01: メモリのフラグ (1は最大サイズが存在することを示す)？
80: 0b10000000 -> 000 0000 
02: 0b00000010 -> 000 0010 00000100000000 2^8 = 256
80: 0b10000000 -> 000 0000
02: 0b00000010 -> 000 0010 00000100000000 2^8 = 256

=== グローバルセクション ===
06: グローバルセクションを表すバイトコード
17: 0b00010111 -> 0010111 -> 2^0 + 2^1 + 2^2 + 2^4 = 23バイト
04: グローバル（コンポーネント？変数？）4つあることを示す

7F: i32の型
01: mutable(変更可能)
41: i32.const 後続の定数値をスタックにプッシュ 
80: 0b10000000 -> 0000000
80: 0b10000000 -> 0000000
04: 0b00000100 -> 0000100 -> 1 0000 0000 0000 0000 -> 65536
0B: 終了命令

7F: i32の型
01: mutable(変更可能)
41: i32.const 定数値をスタックにプッシュ 
00: 0
0B: 終了

7F: i32の型
01: mutable(変更可能)
41: i32.const 定数値をスタックにプッシュ 
00: 0
0B: 終了

7F: i32の型
01: mutable(変更可能)
41: i32.const 定数値をスタックにプッシュ 
00: 0
0B: 終了

=== エクスポートセクション
07: エクスポートセクションを示すバイトコード
8F: 0b10001111 -> 0001111
02: 0b00000010 -> 0000010 -> 0000010 0001111 -> 2^0 + 2^1 + 2^2 + 2^3 + 2^8 -> 1+2+4+8+256->271
0E: 
06: 
6D:
656D6F72790200115F5F7761736D5F63616C6C
5F63746F72730000046D61696E0003195F5F696E
6469726563745F66756E6374696F6E5F7461626C
650100105F5F6572726E6F5F6C6F636174696F6E
00040666666C757368001115656D736372697074
656E5F737461636B5F696E6974000719656D7363
72697074656E5F737461636B5F6765745F667265
65000819656D736372697074656E5F737461636B
5F6765745F62617365000918656D736372697074
656E5F737461636B5F6765745F656E64000A0973
7461636B5361766500120C737461636B52657374
6F726500130A737461636B416C6C6F6300141C65
6D736372697074656E5F737461636B5F6765745F
63757272656E740015

=== コードセクション
0A: コードセクションを表すバイトコード
E8: 0b11101000 
04: 0b00000100 -> 00001001101000 ->  2^3 + 2^5 + 2^6 + 2^9 = 616バイト
16: 0b00010110 -> 0010110 -> 2^1 + 2^2 + 2^4 -> 22 22個の関数が含まれる
-- 0番目の関数
04: 0b00000100 -> 0000100 -> 2^2 -> 4バイト
00: 返り値？ローカル変数？引数？の数が0個
10: call命令
07: 関数7を呼ぶ
0B: 終了
-- 1番目の関数
52: 0b01010010 -> 1010010 -> 2^1 + 2^4 + 2^6 = 82バイト
01: 引数と返り値の数が一個？
0A: ローカル変数の数 (?) 10個だとWATファイルと一致
7F: i32
23: global.get
00: 0
21: local.set
01: 1
41: i32.const
10: 0b00010000 -> 0010000-> 2^4 = 16
21: local.set
02: 2
20: local.get
01: 1
20: local.get
02: 2
6B: i32.sub
21: local.set
03: 3
20: local.get
03: 3
20: local.get
00: 0
36: i32.store
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: offset=12, アドレスx + 12 のメモリアドレスの位置にデータが保存される？
20: local.get
03: 3
28: i32.load
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: オフセット12
21: local.set
04: 4
41: i32.const
00: 0
21: local.set
05: 5
20: local.get
05: 5
28: i32.load
02: アラインメント
80: offset 0b10000000 -> 0000000
80: offset 0b10000000 -> 0000000
04: offset 0b00000100 -> 0000100 -> 0000100 0000000 0000000 = 2^16 = 65536
21: local.set
06: 6
20: local.get
06: 6
20: local.get
04: 4
6A: i32.add
21: local.set
07: 7
41: i32.const
00: 0
21: local.set
08: 8
20: local.get
08: 8
20: local.get
07: 7
36: i32.store
02: 2^2で4バイト境界のアラインメント
80: offset
80: offset
04: offset 2^16 = 65536
41: i32.const
00: 0
21: local.set
09: 9
20: local.get
09: 9
28: i32.load
02: 2^2で4バイト境界のアラインメント
80: offset
80: offset
04: offset 2^16 = 65536
21: local.set
0A: 10
20: local.get
0A: 10
0F: return
0B: 終了命令

---2番目の関数
4C: 0b010001100 -> 2^2 + 2^3 + 2^7 = 4 + 8 + 128 = 140バイト
01: 引数or返り値?
09: 0b00001001 -> 2^0 + 2^3 = 9 ローカル変数の数 
7F: i32
23: global.get
00: 0
21: local.set
00: 0
41: i32.const
10: 0b000010000 -> 00010000 -> 2^4 = 16
21: local.set
01: 1
20: local.get
00: 0
20: local.get
01: 1
6B: i32.sub
21: local.set
02: 2
20: local.get
02: 2
24: global.set
00: 0
41: i32.const
00: 0
21: local.set
03: 3
20: local.get
02: 3
20: local.get
03: 3
36: i32.store
02: アラインメント 2^2 4バイト境界
0C: offset 12
41: i32.const
14: 20
21: local.set
04: 4
20: local.get
04: 4
10: call命令
01: 1
21: local.set
05: 5
20: local.get
02: 2
20: local.get
05: 5
36: i32.store
02: 2^2 4バイト境界アラインメント
08: offset=8
20: local.get
02: 2
28: i32.load
02: 2^2 アラインメント 4バイト境界
08: offset=8
21: local.set
06: 6
41: i32.const
10: 0b00010000 -> 0010000 -> 2^4 = 16
21: local.set
07: 7
20: local.get
02: 2
20: local.get
07: 7
6A: i32.add
21: local.set
08: 8
20: local.get
08: 8
24: global.set
00: 0
20: local.get
06: 6
0F: return 
0B: 終了命令

---3番目の関数
0B: 0b00001011 -> 0001011 = 2^0 + 2^1 + 2^3 = 1 + 2 + 8 = 11バイト 
01: 返り値？
01: ローカル変数の個数?
7F: i32
10: call
02: 2
21: local.set
02: 2
20: local.get
02: 2
0F: return
0B: 終了命令

--- 4番目の関数
06: 0b0000110 -> 2^1 + 2^2 = 6 
00: ?（ローカル変数？）
41: i32.const
84: 0b10000100 -> 0000100
80: 0b10000000 -> 0000000
04: 0b00000100 -> 0000100 -> 100 0000000 0000100 -> 2^2 + 2^16 = 4+65536 = 65540(WATと一致)
0B: 終了命令

--- 5番目の関数
06: 0b0000110 -> 2^1 + 2^2 = 6 
00: ローカル変数が0個？
20: local.get
00: 0
24: global.set
01: 1
0B: 終了命令

--- 6番目の関数
04: 4バイト
00: ローカル変数0個
23: global.get
01: 1
0B: 終了命令

--- 7番目の関数
12: 0b00010010 -> 0010010 -> 2^1 + 2^4 = 18バイト
00: ローカル変数0個？
41: i32.const
80: 0b10000000 -> 0000000
80: 0b10000000 -> 0000000
04: 0b00000100 -> 0000100 -> 65536
24: global.set
03: 3
41: i32.const
00: 0
41: i32.const
0F: 0b00001111 -> 2^0 + 2^1 + 2^2 + 2^3  = 15 
6A: i32.add
41: i32.const
70: 01110000 ->  2^4 + 2^5 + 2^6 -> 112 (WATだとなぜか-16?)
71: i32.and
24: global.set
02: 2
0B: 終了命令

--- 8番目の関数
07: 7バイト
00: ローカル変数が0個
23: global.get
00: 0
23: global.get
02: 2
6B: i32.sub
0B: 終了命令

--- 9番目の関数
04: 4バイト続く
00: ローカル変数が0個？
23: global.get
03: 3
0B: 終了命令

--- 10番目の関数
04: 4バイト続く
00: ローカル変数が0個？
23: global.get
02: 2
0B: 終了命令

---11番目の関数
02: 2バイト続く
00: ローカル変数が0個？
0B: 終了命令

--- 12番目の関数
02: 2バイト続く
00: ローカル変数が0個？
0B: 終了命令

--- 13番目の関数
0C: 0b00001100 -> 0001100 -> 2^2 + 2^3 = 4 + 8 = 12バイト
00: ローカル変数0個数？
41: i32.const
88: 0b10001000 -> 0001000
80: 0b10000000 -> 0000000
04: 0b00000100 -> 0000100 -> 0000100 0000000 0001000 -> 2^3 + 2^16 = 65544
10: call
0B: 11
41: i32.const
8C: 0b10001100 -> 0001100
80: 0b10000000 -> 0000000
04: 0b00000100 -> 0000100 -> 0000100 0000000 0001100 -> 2^2 + 2^3 + 2^16 = 65548
0B: 終了命令

--- 14番目の関数
08: 8バイト続く
00: ローカル変数の個数が0個？
41: i32.const
88: 0b10001000 -> 0001000
80: 0b10000000 -> 0000000
04: 0b00000100 -> 0000100 -> 0000100 0000000 0001000 -> 2^3 + 2^16 = 65544
10: call
0C: 12
0B: 終了命令

--- 15番目の関数
04: 4バイト続く
00: ローカル変数の個数が0個？
41: i32.const
01: 1
0B: 終了命令

--- 16番目の関数
02: 2バイト続く
00: ローカル変数の個数が0個？
0B: 終了命令

--- 17番目の関数
B4: 0b10110100 -> 0110100
02: 0b00000010 -> 0000010 -> 0000010 0110100 -> 2^2 + 2^4 + 2^5 + 2^8 = 308
01: ?
03: ローカル変数の個数？
7F: i32
02: block命令
40: 
20: local.get
00: 0
0D: br_if
00: 0
41: i32.const
00: 0
21: local.set
01: 1
02: block命令
40: ?
41: i32.const
00: 0
28: i32.load
02: 2^2 4バイト境界アラインメント
90: 0b10010000 -> 0010000
80: 0b10000000 -> 0000000
04: 0b00000100 -> 0000100 -> 0000100 0000000 0010000 -> 2^4 + 2^16 = 65552
45: i32.eqz
0D: br_if
00: 0
41: i32.const
00: 0
28: i32.load
02: 2^2 4バイト境界アラインメント
90: 0b10010000 -> 0010000
80: 0b10000000 -> 0000000
04: 0b00000100 -> 0000100 -> 0000100 0000000 0010000 -> 2^4 + 2^16 = 65552
10: call
11: 0b00010001 -> 0010001 -> 2^0 + 2^4 = 17 
21: local.set
01: 1
0B: 終了命令
02: block命令
40: ?
41: i32.const
00: 0
28: i32.load
02: 2^2 4バイト境界アラインメント
90: 0b10010000 -> 0010000
80: 0b10000000 -> 0000000
04: 0b00000100 -> 0000100 -> 0000100 0000000 0010000 -> 2^4 + 2^16 = 65552
45: i32.eqz
0D: br_if
00: 0
41: i32.const
00: 0
28: i32.load
02: 2^2 4バイト境界アラインメント
90: 0b10010000 -> 0010000
80: 0b10000000 -> 0000000
04: 0b00000100 -> 0000100 -> 0000100 0000000 0010000 -> 2^4 + 2^16 = 65552
10: call
11: 0b00010001 -> 0010001 -> 2^0 + 2^4 = 17 
20: local.get
01: 1
72: i32.or
21: local.set
01: 1
0B: 終了命令
02: block命令
40: 0b01000000 -> 1000000 = 2^6 = 64バイト続くってこと？
10: call
0D: 0b00001101 -> 0001101 = 2^0 + 2^2 + 2^3 = 13
28: i32.load
02: 2^2 4バイト境界アラインメント
00: ?
22: local.tee
00: 0
45: i32.eqz
0D: br_if
00: 0
03: loop
40: 0b01000000 -> 1000000 -> 2^6 = 64続くってこと？
41: i32.const
00: 0
21: local.set
02: 2
02: block命令
40: 0b01000000 -> 1000000 -> 2^6 = 64続くってこと？
20: local.get
00: 0
28: i32.load
02: 2^2 4バイト境界アラインメント
4C: offset76 0b01001100 -> 1001100 -> 2^2 + 2^3 + 2^6 = 76
41: i32.const
00: 0
48: i32.lt_s
0D: br_if
00: 0
20: local.get 
00: 0
10: call
0F: 15
21: local.set
02: 2
0B: 終了命令
02: block
40: ?
20: local.get
00: 0
28: i32.load
02: 2^2 4バイト境界アラインメント
14: offset 20 (0b00010100 -> 0010100 -> 2^2 + 2^4 = 20)
20: local.get
00: 0
28: i32.load
02: 2^2 4バイト境界アラインメント
1C: offset 28
46: i32.eq
0D: br_if
00: 0
20: local.get
00: 0
10: call
11: 17
20: local.get
01: 1
72: i32.or
21: local.set
01: 1
0B: 終了命令
02: block命令
40: ?
20: local.get
02: 2
45: i32.eqz
0D: br_if
00: 0
20: local.get
00: 0
10: call
10: 16
0B: 終了命令
20: local.get
00: 0
28: i32.load
02: 2^2 4バイト境界アラインメント
38: offset 56 (0b00111000 -> 0111000 -> 2^3 + 2^4 + 2^5 = 56)
22: local.tee
00: 0
0D: br_if
00: 0
0B: 終了命令
0B: 終了命令
10: call
0E: 14 (0b00001110 -> 0001110 -> 2^1 + 2^2 + 2^3 = 14)
20: local.get
01: 1
0F: return
0B: 終了命令
41: i32.const
00: 0
21: local.set
02: 2
02: block
40: ?
20: local.get
00: 0
28: i32.load
02: 2^2 4バイト境界アラインメント
4C: offset 76 (0b01001100 -> 1001100 -> 2^2 + 2^3 + 2^6 = 76)
41: i32.const
00: 0
48: i32.lt_s
0D: br_if
00: 0
20: local.get
00: 0
10: call
0F: 15
21: local.set
02: 2
0B: 終了命令
02: block
40: ?
02: block
40: ? 
02: block
40: ?
20: local.get
00: 0
28: i32.load
02: 2^2 4バイト境界アラインメント
14: offset 20 (0b00010100 -> 0010100 -> 2^2 + 2^4 = 20)
20: local.get
00: 0
28: i32.load
02: 2^2 4バイト境界アラインメント
1C: offset=28
46: i32.eq
0D: br_if
00: 0
20: local.get
00: 0
41: i32.const
00: 0
41: i32.const
00: 0
20: local.get
00: 0
28: i32.load
02: 2^2 4バイト境界アラインメント
24: offset=36
11: call_indirect *
05: type 5 *
00: ?
1A: drop
20: local.get
00: 0
28: i32.load
02: 2^2 4バイト境界アラインメント
14: offset=20
0D: br_if
00: 0
41: i32.const
7F: -1?
21: local.set
01: 1
20: local.get
02: 2
0D: br_if *
01: 1
0C: br
02: 2
0B: 終了命令
02: block
40: ?
20: local.get
00: 0
28: i32.load
02: 2^2 4バイト境界アラインメント
04: offset=4
22: local.tee *
01: 1
20: local.get
00: 0
28: i32.load
02: 2^2 4バイト境界アラインメント
08: offset=8
22: local.tee
03: 3
46: i32.eq
0D: br_if *
00: 0
20: local.get
00: 0
20: local.get
01: 1
20: local.get
03: 3
6B: i32.sub
AC: i64.extend_i32_s *
41: i32.const
01: 1
20: local.get
00: 0
28: i32.load 
02: 2^2 4バイト境界アラインメント
28: offset=40
11: call_indirect
06: type 6
00: ?
1A: drop
0B: 終了命令
41: i32.const
00: 0
21: local.set
01: 1
20: local.get
00: 0
41: i32.const
00: 0
36: i32.store 
02: 2^2 4バイト境界アラインメント
1C: offset=28 (0b00011100 -> 0011100 = 2^2 + 2^3 + 2^4)
20: local.get
00: 0
42: i64.const
00: 0
37: i64.store
03: 2^3 8バイト境界アラインメント
10: offset=16
20: local.get
00: 0
42: i64.const
00: 0
37: i64.store
02: 2^2 4バイト境界アラインメント
04: offset=4
20: local.get
02: 2
45: i32.eqz *
0D: br_if
01: 1
0B: 終了命令
20: local.get
00: 0
10: call
10: 16
0B: 終了命令
20: local.get
01: 1
0B: 終了命令

--- 18番目の関数
04: 4バイト続く
00: ローカル変数が0?
23: global.get
00: 0
0B: 終了命令

--- 19番目の関数
06: 6バイト続く
00: ローカル変数が0?
20: local.get
00: 0
24: global.set
00: 0
0B: 終了命令

-- 20番目の関数
12: 0b00010010 -> 0010010 -> 2^1 + 2^4 = 18バイト
01: ?
02: ローカル変数が2?
7F: i32
23: global.get
00: 0
20: local.get
00: 0
6B: i32.sub
41: i32.const
70: -16?
71: i32.and
22: local.tee
01: 1
24: global.set
00: 0
20: local.get
01: 1
0B: 終了命令

--- 21番目
04: 4バイト続く
00: ローカル変数0?
23: global.get
00: 0
0B: 終了命令

=== データセクション
0B: 0b00001011 -> 0001011 -> 2^0 + 2^1 + 2^3 = 11
0C: 
01:
00:
41:
80:
80:
04:
0B:
04:
0A:
00:
0000