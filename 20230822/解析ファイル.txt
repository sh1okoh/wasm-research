
=== カスタムセクション ===
00
61
73
6D
01
00
00
00
=== カスタムセクション === 

=== 型セクション === 
01: 型セクションを表すバイトコード
25: 後続のバイト列のサイズ 0b00100101 -> 0100101 -> 2^0 + 2^2 + 2^5 = 37バイト
07: 関数が7個 00000111 -> 2^0 + 2^1 + 2^2 = 7 (7個ある)

# mainのこと（？）
60: 関数タイプ
00: 引数の個数(0)
01: 返り値の数(1)
7F: 返り値の型i32

60: 関数タイプ
01: 引数の個数(1)
7F: 引数の型(i32)
00: 返り値(0)

# add_to_globalのこと（？）
60: 関数タイプ
01: 引数の個数(1)
7F: 引数の型(i32)
01: 返り値の個数(1)
7F: 返り値の型i32

60: 関数タイプ
00: 引数の個数(0)
00: 返り値の個数(0)

60: 関数タイプ
02: 引数の個数(2)
7F: 引数の型(i32)
7F: 引数の型(i32)
01: 返り値の個数(1)
7F: 返り値の型i32

60: 関数タイプ
03: 引数の個数(3)
7F: 引数の型(i32)
7F: 引数の型(i32)
7F: 引数の型(i32)
01: 返り値の個数(1)
7F: 返り値の型i32

60: 関数タイプ
03: 引数の個数(3)
7F: 引数の型(i32)
7E: 引数の型(i32)
7F: 引数の型(i32)
01: 返り値の個数(1)
7E: 返り値の型i32

=== 関数セクション ===
03: 関数セクションを表す
17: 0x00010111 -> 0010111 -> 2^0 + 2^1 + 2^2 + 2^4 = 23バイト 
16: 関数が22個あることを示す 0010110 -> 2^1 + 2^2 + 2^4 = 22 (これはindex.watの値と一致)
03: 関数0は type index 3を参照する
02: 関数1は type index 2を参照する
00: 関数2は type index 0を参照する
04: 関数3は type index 4を参照する
00: 関数4は type index 0を参照する
01: 関数5は type index 1を参照する
00: 関数6は type index 0を参照する
03: 関数7は type index 3を参照する
00: 関数8は type index 0を参照する
00: 関数9は type index 0を参照する
00: 関数10は type index 0を参照する
01: 関数11は type index 1を参照する
01: 関数12は type index 1を参照する
00: 関数13は type index 0を参照する
03: 関数14は type index 3を参照する
02: 関数15は type index 2を参照する
01: 関数16は type index 1を参照する
02: 関数17は type index 2を参照する
00: 関数18は type index 0を参照する
01: 関数19は type index 1を参照する
02: 関数20は type index 2を参照する
00: 関数21は type index 0を参照する

=== テーブルセクション ===
04: テーブルセクションを表すバイトコード
05: 0b00000101 -> 0000101 -> 2^0 + 2^2 = 5 5バイト続く
01: テーブルセクションの数が1個
70: funcref 関数への参照
01: フラグ(1は最大サイズが存在することを示す)？
01: 最小サイズ1
01: 最大サイズ1

=== メモリーセクション ===
05: メモリセクションを表すバイトコード
06: 0b00000110 -> 0000110 -> 2^1 + 2^2 = 6バイト
01: メモリの数が1つ
01: メモリのフラグ (1は最大サイズが存在することを示す)？
80: 0b10000000 -> 000 0000 
02: 0b00000010 -> 000 0010 00000100000000 2^8 = 256
80: 0b10000000 -> 000 0000
02: 0b00000010 -> 000 0010 00000100000000 2^8 = 256

=== グローバルセクション ===
06: グローバルセクションを表すバイトコード
17: 0b00010111 -> 0010111 -> 2^0 + 2^1 + 2^2 + 2^4 = 23バイト
04: グローバルセクションが4つあることを示す

7F: i32の型
01: mutable(変更可能)
41: i32.const 後続の定数値をスタックにプッシュ 
80: 0b10000000 -> 0000000
80: 0b10000000 -> 0000000
04: 0b00001000 -> 0001000 -> 8
0B: 終了命令

7F: i32の型
01: mutable(変更可能)
41: i32.const 定数値をスタックにプッシュ 
00: 0
0B: 終了

7F: i32の型
01: mutable(変更可能)
41: i32.const 定数値をスタックにプッシュ 
00: 0
0B: 終了

7F: i32の型
01: mutable(変更可能)
41: i32.const 定数値をスタックにプッシュ 
00: 0
0B: 終了

=== エクスポートセクション
07: エクスポートセクションを示すバイトコード
8F: 0b10001111 -> 0001111
02: 0b00000010 -> 0000010 -> 0000010 0001111 -> 2^0 + 2^1 + 2^2 + 2^3 + 2^8 -> 1+2+4+8+256->271
0E:
06:
6D:
656D6F72790200115F5F7761736D5F63616C6C
5F63746F72730000046D61696E0003195F5F696E
6469726563745F66756E6374696F6E5F7461626C
650100105F5F6572726E6F5F6C6F636174696F6E
00040666666C757368001115656D736372697074
656E5F737461636B5F696E6974000719656D7363
72697074656E5F737461636B5F6765745F667265
65000819656D736372697074656E5F737461636B
5F6765745F62617365000918656D736372697074
656E5F737461636B5F6765745F656E64000A0973
7461636B5361766500120C737461636B52657374
6F726500130A737461636B416C6C6F6300141C65
6D736372697074656E5F737461636B5F6765745F
63757272656E740015

=== コードセクション
0A: コードセクションを表すバイトコード
E8: 0b11101000 
04: 0b00000100 -> 00001001101000 ->  2^3 + 2^5 + 2^6 + 2^9 = 616バイト
16: 0b00010110 -> 0010110 -> 2^1 + 2^2 + 2^4 -> 22 22個の関数が含まれる
04: 0b00000100 -> 0000100 -> 2^2 -> 4バイト
00: 引数の数が0個
10: call命令
07: 関数7を呼ぶ
0B: 終了

52: 0b01010010 -> 1010010 -> 2^1 + 2^4 + 2^6 = 82バイト
01: 引数の数が一個？
0A: ローカル変数の数 (?) 10個だとWATファイルと一致
7F: i32
23: global.get
00: 0
21: local.set
01: 1
41: i32.const
10: 0b00010000 -> 0010000-> 2^4 = 16
21: local.set
02: 2
20: local.get
01: 1
20: local.get
02: 2
6B: i32.sub
21: local.set
03: 3
20: local.get
03: 3
20: local.get
00: 0
36: i32.store
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: offset=12, アドレスx + 12 のメモリアドレスの位置にデータが保存される？
20: local.get
03: 3
28: i32.load
02: アラインメント? 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: オフセット12
21: local.set
04: 4
41: i32.const
00: 0
21: local.set
05: 5
20: local.get
05: 5
28: i32.load
02: アラインメント
80: offset 0b10000000 -> 0000000
80: offset 0b10000000 -> 0000000
04: offset 0b00000100 -> 0000100 -> 0000100 0000000 0000000 = 2^16 = 65536
21: local.set
06: 6
20: local.get
06: 6
20: local.get
04: 4
6A: i32.add
21: local.set
07: 7
41: i32.const
00: 0
21: local.set
08: 8
20: local.get
08: 8
20: local.get
07: 7
36: i32.store
02: 2^2で4バイト境界のアラインメント
80: offset
80: offset
04: offset 2^16 = 65536
41: i32.const
00: 0
21: local.set
09: 9
20: local.get
09: 9
28: i32.load
02: 2^2で4バイト境界のアラインメント
80: offset
80: offset
04: offset 2^16 = 65536
21: local.set
0A: 10
20: local.get
0A: 10
0F: return
0B: 終了命令


4C01097F230021004110
2101200020016B21022002
24004100210320022003
36020C41142104200410
01210520022005360208
20022802082106411021
07200220076A21082008
240020060F0B0B01017F
1002210220020F0B0600
418480040B0600200024
010B040023010B120041
80800424034100410F6A
41707124020B07002300
23026B0B040023030B04
0023020B02000B02000B
0C0041888004100B418C
80040B08004188800410
0C0B040041010B02000B
B40201037F024020000D
00410021010240410028
02908004450D00410028
02908004101121010B02
4041002802908004450D
00410028029080041011
20017221010B0240100D
2802002200450D000340
41002102024020002802
4C4100480D002000100F
21020B02402000280214
200028021C460D002000
101120017221010B0240
2002450D00200010100B
200028023822000D000B
0B100E20010F0B410021
020240200028024C4100
480D002000100F21020B
02400240024020002802
14200028021C460D0020
00410041002000280224
1105001A20002802140D
00417F210120020D010C
020B0240200028020422
0120002802082203460D
002000200120036BAC41
0120002802281106001A
0B410021012000410036
021C2000420037031020
0042003702042002450D
010B200010100B20010B
040023000B0600200024
000B1201027F23002000
6B417071220124002001
0B040023000B

=== データセクション
0B
0C
01
00418080040B040A000000