=== カスタムセクション ===
00
61
73
6D
01
00
00
00
=== カスタムセクション ===

=== 型セクション === 
01: 型セクションを表すバイトコード
25: 後続のバイト列のサイズ 0b00100101 -> 0100101 -> 2^0 + 2^2 + 2^5 = 37バイト
07: 関数の型が7個 00000111 -> 2^0 + 2^1 + 2^2 = 7 (7個ある)


60: 関数タイプ
00: 引数の個数(0)
01: 返り値の数(1)
7F: 返り値の型i32

60: 関数タイプ
01: 引数の個数(1)
7F: 引数の型(i32)
01: 返り値の数(1)
7F: 返り値の型i32

60: 関数タイプ
01: 引数の個数(1)
7F: 引数の型(i32)
00: 返り値の個数(0)

60: 関数タイプ
00: 引数の個数(0)
00: 返り値の個数(0)

60: 関数タイプ
02: 引数の個数(2)
7F: 引数の型(i32)
7F: 引数の型(i32)
01: 返り値の個数(1)
7F: 引数の型(i32)

60: 関数タイプ
03: 引数の個数(3)
7F: 引数の型(i32)
7F: 引数の型(i32)
7F: 引数の型(i32)
01: 返り値の個数(1)
7F: 引数の型(i32)

60: 関数タイプ
03: 引数の個数(3)
7F: 引数の型(i32)
7E: 引数の型(i64)
7F: 引数の型(i32)
01: 返り値の個数(1)
7E: 引数の型(i64)
=== 型セクション === 

=== 関数セクション ===
03: 関数セクションを表す 
18: 0x00011000 -> 0011000 -> 2^3 + 2^4 = 24バイト 
17: 関数が23個あること. 0x00010111 -> 0010111 -> 2^0 + 2^1 + 2^2 + 2^4 = 23個
03: 関数0は type index 3を参照する
01: 関数1は type index 1を参照する
01: 関数2は type index 1を参照する
00: 関数3は type index 0を参照する
04: 関数4は type index 4を参照する
00: 関数5は type index 0を参照する
02: 関数6は type index 2を参照する
00: 関数7は type index 0を参照する
03: 関数8は type index 3を参照する
00: 関数9は type index 0を参照する
00: 関数10は type index 0を参照する
00: 関数11は type index 0を参照する
02: 関数12は type index 2を参照する
02: 関数13は type index 2を参照する
00: 関数14は type index 0を参照する
03: 関数15は type index 3を参照する
01: 関数16は type index 1を参照する
02: 関数17は type index 2を参照する
01: 関数18は type index 1を参照する
00: 関数19は type index 0を参照する
02: 関数20は type index 2を参照する
01: 関数21は type index 1を参照する
00: 関数22は type index 0を参照する
=== 関数セクション ===

=== テーブルセクション ===
04: テーブルセクションを表す
05: 5バイト続く：0x00000101 -> 0000101 -> 2^0 + 2^2 = 5
01: テーブルの数が1個
70: funcref 関数への参照 (どこのアドレスに存在する関数なのかを表として用意される？)
01: フラグ(1は最大サイズが存在することを示す)
01: 最小サイズ1
01: 最大サイズ1
=== テーブルセクション ===

=== メモリーセクション ===
05: メモリセクションを表す
06: 0b00000110 -> 0000110 -> 2^1 + 2^2 = 6バイト
01: メモリの数が1つ
01: メモリのフラグ (1は最大サイズが存在することを示す)
80: 0b10000000 -> 000 0000
02: 0b00000010 -> 000 0010 00000100000000 2^8 = 256
80: 0b10000000 -> 000 0000
02: 0b00000010 -> 000 0010 00000100000000 2^8 = 256
=== メモリーセクション ===

=== グローバルセクション ===
06: グローバルセクションを表すバイトコード
17: 0b00010111 -> 0010111 -> 2^0 + 2^1 + 2^2 + 2^4 = 23バイト
04: グローバル（コンポーネント？変数？）4つあることを示す

7F: i32の型
01: mutable(変更可能)
41: i32.const 後続の定数値をスタックにプッシュ 
80: 0b10000000 -> 0000000
80: 0b10000000 -> 0000000
04: 0b00000100 -> 0000100 -> 1 0000 0000 0000 0000 -> 65536
0B: 終了命令

7F: i32の型
01: mutable(変更可能)
41: i32.const 後続の定数値をスタックにプッシュ 
00: 0
0B: 終了命令

7F: i32の型
01: mutable(変更可能)
41: i32.const 後続の定数値をスタックにプッシュ 
00: 0
0B: 終了命令

7F: i32の型
01: mutable(変更可能)
41: i32.const 後続の定数値をスタックにプッシュ 
00: 0
0B: 終了命令
=== グローバルセクション ===
=== エクスポートセクション === 
07: エクスポートセクションを示すバイトコード 
8F: 0b10001111 -> 0001111
02: 0b00000010 -> 0000010 -> 0000010 0001111 -> 2^0 + 2^1 + 2^2 + 2^3 + 2^8 -> 1+2+4+8+256->271
0E: 
06:
6D
65
6D
6F
72
79
02
00
11
5F
5F
77
61
73
6D
5F
63
61
6C
6C
5F
63
74
6F
72
73
00
00
04
6D
61
69
6E
00
04
19
5F
5F
69
6E
64
69
72
65
63
74
5F
66
75
6E
63
74
69
6F
6E
5F
74
61
62
6C
65
01
00
10
5F
5F
65
72
72
6E
6F
5F
6C
6F
63
61
74
69
6F
6E
00
05
06
66
66
6C
75
73
68
00
12
15
65
6D
73
63
72
69
70
74
65
6E
5F
73
74
61
63
6B
5F
69
6E
69
74
00
08
19
65
6D
73
63
72
69
70
74
65
6E
5F
73
74
61
63
6B
5F
67
65
74
5F
66
72
65
65
00
09
19
65
6D
73
63
72
69
70
74
65
6E
5F
73
74
61
63
6B
5F
67
65
74
5F
62
61
73
65
00
0A
18
65
6D
73
63
72
69
70
74
65
6E
5F
73
74
61
63
6B
5F
67
65
74
5F
65
6E
64
00
0B
09
73
74
61
63
6B
53
61
76
65
00
13
0C
73
74
61
63
6B
52
65
73
74
6F
72
65
00
14
0A
73
74
61
63
6B
41
6C
6C
6F
63
00
15
1C
65
6D
73
63
72
69
70
74
65
6E
5F
73
74
61
63
6B
5F
67
65
74
5F
63
75
72
72
65
6E
74
00
16
=== エクスポートセクション === 
=== コードセクション === 
0A: コードセクションを表すバイトコード
FC: 0b11111100 -> 1111100
07: 0b00000111 -> 0000111 -> 0000111 1111100 -> 2^2 + 2^3 + 2^4 + 2^5 + 2^6 + 2^7 + 2^8 + 2^9
17: 0b00010111 -> 0010111 -> 2^0 + 2^1 + 2^2 + 2^4 = 23個の関数が含まれる

0番目の関数
04: 4バイト
00: ローカル変数が0個
10: call命令
08: 関数8番目を呼ぶ
0B: 終了命令

1番目の関数（fibonacci関数）
B2: 0b10110010 
02: 0b00000010 ->  0000010 0110010 -> 2^1 + 2^4 + 2^5 + 2^8 = 306
01: ローカル変数あり
21: 00100001 -> 2^0 + 2^5 = 33個
7F: i32
23: global.get
00: 0
21: local.set
01: 1
41: i32.const
20: 32
21: local.set
02: 2
20: local.get
01: 1
20: local.get
02: 2
6B: i32
21: local.set
03: 3
20: local.get
03: 3
20: local.get
00: 0
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
18: 0b00011000 -> 2^3 + 2^4=24
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
18: 0b00011000 -> 2^3 + 2^4=24
21: local.set
04: 4
02: block
40: 空のタイプ
02: block
40: 空のタイプ
20: local.get
04: 4
0D: br_if
00: 0
41: i32.const
00: 0
21: local.set
05: 5
20: local.get
03: 3
20: local.get
05: 5
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
1C: 28 0001 1100 -> 2^2+2^3+2^4=28
0C: br
01: 1
0B: end
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
18: 24
21: local.set
06: 6
41: i32.const
01: 1
21: local.set
07: 7
20: local.get
06: 6
21: local.set
08: 8
20: local.get
07: 7
21: local.set
09: 9
20: local.get
08: 8
20: local.get
09: 9
46: i32.eq
21: local.set
0A: 10
41: i32.const
01: 1
21: local.set
0B: 11
20: local.get
0A: 10
20: local.get
0B: 11
71: i32.and
21: local.set
0C: 12
02: block
40: empty?
20: local.get
0C: 12
45: i32.eqz
0D: br_if
00: 0
41: i32.const
01: 1
21: local.set
0D: 13
20: local.get
03: 3
20: local.get
0D: 13
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
1C: 0001 1100 -> 2^2+2^3+2^4 = 28
0C: br
01: 1
0B: end
41: i32.const
00: 0
21: local.set
0E: 14
20: local.get
03; 3
20: local.get
0E: 14
36: i32.store
02: 2
14: 20
41: i32.const
01: 1
21: local.set
0F: 15
20: local.get
03: 3
20: local.get
0F: 15
36: i32.store
02: 2 アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
10: 16
41: i32.const
01: 1
21: local.set
10: 16
20: local.get
03: 3
20: local.get
10: 10
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
02: block
40: empty
03: loop
40: empty
20: local.get
03: 3
28: i32.load
02: 2 アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
21: local.set
11: 21
20: local.get
03: 3
28: i32.load
02: 2 アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
18: 24 0001 1000 -> 2^3 + 2^4
21: local.set
12: 18
20: local.get
11: 17
21: local.set
13: 19
20: local.get
12: 18 (2*16^0 + 1*16^1)
21: local.set
14: 20
20: local.get
13: 19
20: local.get
14: 20
4C: i32.le_s
21: local.set
15: 21
41: i32.const
01: 1
21: local.set 
16: 22
20: local.get
15: 21
20: local.get
16: 22
71: i32.and
21: local.set 
17: 23
20: local.get
17: 23
45: i32.eqz
0D: br_if
01: 1
20: local.get
03: 3
28: i32.load
02: 2 アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
14: offset=20
21: local.set
18: 24
20: local.get
03: 3
28: i32.load
02: 2
10: 16
21: local.set
19: 25
20: local.get
18: 24
20: local.get 
19: 25
6A: i32.add 
21: local.set
1A: 26
20: local.get
03; 3
20: local.get
1A: 26
36: i32.store
02: 2 アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: 12
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
10: 16
21: local.set
1B: 27
20: local.get
03: 3
20: local.get
1B: 27
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
14: 20
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: 12
21: local.set
1C: 28
20: local.get
03: 3
20: local.get
1C: 28
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
10: 16
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
21: local.set
1D: 20
41: i32.const
01: 1
21: local.set
1E: 30
20: local.get 
1D: 29
20: local.get
1E: 30
6A: i32.add 
21: local.set
1F: 31
20: local.get
03: 3
20: local.get
1F: 31
36: i32.store
02: アラインメント
08: 8
0C: br
00: 0
0B: end
00: unreachable
0B: end
20: local.get
03: 3
28:  i32.load
02: アラインメント
14: 20
21: local.set
20: 32
20: local.get
03: 3
20: local.get
20: 32
36: i32.store
02: アラインメント
1C: 28
0B: end
20: local.get
03: 3
28: i32.load 
02: アラインメント
1C: 28
21: local.set
21: 33
20: local.get
21: 33
0F: return
0B: 終了命令

2番目の関数 (reverseNumber関数)
8F: 0b10001111 -> 0001111
01: 0b00000001 -> 1 0001111 -> 2^0 + 2^1 + 2^2 + 2^3 +2^7 = 143
01: ローカル変数あり
10: ローカル変数8個 0001 0000 -> 2^4 = 16
7F: i32
23: global.get
00: 0
21: local.set
01: 1
41: i32.const
10: 16
21: local.set
02: 2
20: local.get
01: 1
20: local.get
02: 2
6B: i32.sub 
21: local.set
03: 3
20: local.get
03: 3
20: local.get
00: 0
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: 12
41: i32.const
00: 0
21: local.set
04: 4
20: local.get
03: 3
20: local.get
04: 4
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: offset=8
02: block
40: empty
03: loop
40: empty
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: 12
21: local.set
05: 5
20: local.get
05: 5
45: i32.eqz
0D: br_if
01: 1
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
21: local.set
06: 6
41: i32.const
0A: 10
21: local.set
07: 7
20: local.get
06: 6
20: local.get
07: 7
6C: i32.mul
21: local.set
08: 8
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: 12
21: local.set
09: 9
41: i32.const
0A: 10
21: local.set
0A: 10
20: local.get
09: 9
20: local.get
0A: 10
6F: i32.rem_s
21: local.set
0B: 11
20: local.get
08: 8
20: local.get
0B: 11
6A: i32.add
21: local.set
0C: 12
20: local.get
03: 3
20: local.get
0C: 12
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: 12
21: local.set
0D: 13
41: i32.const
0A: 10
21: local.set 
0E: 14
20: local.get
0D: 13
20: local.get
0E: 14
6D: i32.div_s
21: local.set
0F: 15
20: local.get
03: 3
20: local.get
0F: 15
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: 12
0C: br
00: 0
0B: end
00: unreachable
0B: end
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
21: local.set
10: 16
20: local.get 
10: 16
0F: return
0B: 終了命令

3番目の関数(main関数)
6E: 0b01101110 -> 2^1 + 2^2 + 2^3 + 2^5 + 2^6 = 110
01: ローカル変数あり
0C: 00001100 ->  2^2 + 2^3 = 12
7F: i32
23: global.get
00: 0
21: local.set
00: 0
41: i32.const
10: 16
21: local.set
01: 1
20: local.get
00: 0
20: local.get
01: 1
6B: i32.sub 
21: local.set
02: 2
20: local.get
02: 2
24: global.set
00: 0
41: i32.const
00: 0
21: local.set
03: 3
20: local.get
02: 2
20: local.get
03: 3
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: 12
41: i32.const
0A: 10
21: local.set
04: 4
20: local.get
02: 2
20: local.get
04: 4
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
20: local.get
02: 2
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
21: local.set
05: 5
20: local.get
05: 5
10: call
01: 1
21: local.set
06: 6
20: local.get
02: 2
20: local.get
06: 6
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
04: 4
20: local.get
02: 2
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
04: 4
21: local.set
07: 7
20: local.get
07: 7
10: call
02: 2
21: local.set
08: 8
20: local.get 
02: 2
20: local.get
08: 8
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
00: 9
20: local.get
02: 2
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
00: 0
21: local.set
09: 9
41: i32.const
10: 16
21: local.set
0A: 10
20: local.get
02: 2
20: local.get
0A: 10
6A: i32.add 
21: local.set
0B: 11
20: local.get 
0B: 11
24: global.set
00: 0
20: local.get
09: 9
0F: return
0B: 終了命令

4番目の関数
0B
01
01
7F
10
03
21
02
20
02
0F
0B
06
00
41
80
80
04
0B
06
00
20
00
24
01
0B
04
00
23
01
0B
12
00
41
80
80
04
24
03
41
00
41
0F
6A
41
70
71
24
02
0B
07
00
23
00
23
02
6B
0B
04
00
23
03
0B
04
00
23
02
0B
02
00
0B
02
00
0B
0C
00
41
84
80
04
10
0C
41
88
80
04
0B
08
00
41
84
80
04
10
0D
0B
04
00
41
01
0B
02
00
0B
B4
02
01
03
7F
02
40
20
00
0D
00
41
00
21
01
02
40
41
00
28
02
8C
80
04
45
0D
00
41
00
28
02
8C
80
04
10
12
21
01
0B
02
40
41
00
28
02
8C
80
04
45
0D
00
41
00
28
02
8C
80
04
10
12
20
01
72
21
01
0B
02
40
10
0E
28
02
00
22
00
45
0D
00
03
40
41
00
21
02
02
40
20
00
28
02
4C
41
00
48
0D
00
20
00
10
10
21
02
0B
02
40
20
00
28
02
14
20
00
28
02
1C
46
0D
00
20
00
10
12
20
01
72
21
01
0B
02
40
20
02
45
0D
00
20
00
10
11
0B
20
00
28
02
38
22
00
0D
00
0B
0B
10
0F
20
01
0F
0B
41
00
21
02
02
40
20
00
28
02
4C
41
00
48
0D
00
20
00
10
10
21
02
0B
02
40
02
40
02
40
20
00
28
02
14
20
00
28
02
1C
46
0D
00
20
00
41
00
41
00
20
00
28
02
24
11
05
00
1A
20
00
28
02
14
0D
00
41
7F
21
01
20
02
0D
01
0C
02
0B
02
40
20
00
28
02
04
22
01
20
00
28
02
08
22
03
46
0D
00
20
00
20
01
20
03
6B
AC
41
01
20
00
28
02
28
11
06
00
1A
0B
41
00
21
01
20
00
41
00
36
02
1C
20
00
42
00
37
03
10
20
00
42
00
37
02
04
20
02
45
0D
01
0B
20
00
10
11
0B
20
01
0B
04
00
23
00
0B
06
00
20
00
24
00
0B
12
01
02
7F
23
00
20
00
6B
41
70
71
22
01
24
00
20
01
0B
04
00
23
00
0B